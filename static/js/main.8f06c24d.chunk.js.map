{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","logging","vc","VerifiableCredential","Math","random","toString","substr","handler","bind","contents","this","setState","className","Container","Jumbotron","Row","Col","Card","Header","ListGroup","variant","Item","funcName","Form","Label","Control","as","value","JSON","stringify","rows","style","color","Component","getSampleKey","keypair","generateEcdsaSecp256k1Keypair","id","controller","type","publicKey","getPublicKeyFromKeyringPair","TextForm","handleChange","handleSubmit","event","target","preventDefault","valueToUse","startsWith","parse","e","console","log","inline","onSubmit","Group","controlId","onChange","Button","KeyForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f06c24d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport VerifiableCredential from \"@docknetwork/sdk/src/verifiable-credential\";\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form'\nimport Card from 'react-bootstrap/Card'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport {generateEcdsaSecp256k1Keypair, getPublicKeyFromKeyringPair} from \"@docknetwork/sdk/src/utils/misc\";\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      logging: \"\",\n      vc: new VerifiableCredential(`https://example.com/credentials/${Math.random().toString(36).substr(2, 9)}`),\n    };\n\n    this.handler = this.handler.bind(this)\n  }\n\n  handler(contents) {\n    this.setState(contents)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n        <Jumbotron>\n          <header className=\"App-header\">\n          <h1 className=\"header\">Verifiable Credentials Demo</h1>\n            <Row>\n              <Col>\n                <Card>\n                  <Card.Header>Available Methods</Card.Header>\n                  <ListGroup variant=\"flush\">\n                  <ListGroup.Item><TextForm vc={this.state.vc} funcName=\"addContext\" handler={this.handler} /></ListGroup.Item>\n                  <ListGroup.Item><TextForm vc={this.state.vc} funcName=\"addType\" handler={this.handler} /></ListGroup.Item>\n                  <ListGroup.Item><TextForm vc={this.state.vc} funcName=\"addSubject\" handler={this.handler} /></ListGroup.Item>\n                  <ListGroup.Item><TextForm vc={this.state.vc} funcName=\"setStatus\" handler={this.handler} /></ListGroup.Item>\n                  <ListGroup.Item><TextForm vc={this.state.vc} funcName=\"setIssuanceDate\" handler={this.handler} /></ListGroup.Item>\n                  <ListGroup.Item><TextForm vc={this.state.vc} funcName=\"setExpirationDate\" handler={this.handler} /></ListGroup.Item>\n                  <ListGroup.Item><KeyForm vc={this.state.vc} funcName=\"sign\" handler={this.handler}/></ListGroup.Item>\n                  </ListGroup>\n                </Card>\n              </Col>\n              <Col>\n                <Card>\n                  <Card.Header>Output</Card.Header>\n                  <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                      <Form>\n                        <Form.Label>Verifiable Credential</Form.Label>\n                        <Form.Control as=\"textarea\" value={JSON.stringify(this.state.vc, null, 1)} rows=\"15\"/>\n                      </Form>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                      <Form>\n                        <Form.Label>Error Log</Form.Label>\n                        <Form.Control as=\"textarea\" value={JSON.stringify(this.state.logging, null, 1)} style={{color: \"red\"}} rows=\"5\"/>\n                      </Form>\n                    </ListGroup.Item>\n                  </ListGroup>\n                </Card>\n              </Col>\n            </Row>\n          </header>\n        </Jumbotron>\n        </Container>\n      </div>\n    );\n    }\n\n}\n\nexport default App;\n\n\nfunction getSampleKey() {\n  const keypair = generateEcdsaSecp256k1Keypair('issuer', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n  return {\n    id: 'https://gist.githubusercontent.com/lovesh/67bdfd354cfaf4fb853df4d6713f4610/raw',\n    controller: 'https://gist.githubusercontent.com/lovesh/312d407e3a16be0e7d5e43169e824958/raw',\n    type: 'EcdsaSecp256k1VerificationKey2019',\n    keypair: keypair,\n    publicKey: getPublicKeyFromKeyringPair(keypair)\n  };\n}\n\nclass TextForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vc: this.props.vc,\n      value: '',\n      funcName: this.props.funcName,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n      try {\n        let valueToUse = this.state.value.toString()\n        if (valueToUse.startsWith('{')){\n          valueToUse = JSON.parse(valueToUse)\n        }\n        this.props.handler(\n          {\n            vc: this.state.vc[this.state.funcName](valueToUse),\n            logging: \"\"\n          }\n        )\n      } catch (e) {\n        this.props.handler({logging: e.toString()})\n        console.log(e)\n      }\n  }\n  render() {\n    return (\n        <Form inline onSubmit={this.handleSubmit}>\n          <Form.Group controlId={this.props.funcName}>\n          <Form.Control type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n          <Button type=\"submit\" >{this.props.funcName}</Button>\n          </Form.Group>\n        </Form>\n    );\n  }\n}\n\nclass KeyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vc: this.props.vc,\n      value: getSampleKey(),\n      funcName: this.props.funcName,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault()\n      try {\n        let valueToUse = this.state.value\n        this.props.handler(\n          {\n            vc: await this.state.vc[this.state.funcName](valueToUse),\n            logging: \"\"\n          }\n        )\n      } catch (e) {\n        this.props.handler({logging: e.toString()})\n        console.log(e)\n      }\n  }\n  render() {\n    return (\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group controlId={this.props.funcName}>\n          <Form.Label>Signing Key</Form.Label>\n          <Form.Control type=\"text\" value={JSON.stringify(this.state.value, null, 1)} as=\"textarea\" rows={15}/>\n          <Button type=\"submit\" variant=\"success\" >{this.props.funcName}</Button>\n          </Form.Group>\n        </Form>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}